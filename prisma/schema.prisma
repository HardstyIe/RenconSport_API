generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid()) @db.Uuid
  email            String            @unique @db.VarChar(100)
  first_name       String            @db.VarChar(50)
  last_name        String            @db.VarChar(50)
  password         String            @db.VarChar(100)
  is_admin         Boolean           @default(false)
  birthday         DateTime          @db.Timestamp()
  location         String?           @db.VarChar(250)
  phoneNumber            String?           @db.VarChar(50)
  ChatMessages     ChatMessage[]
  Trainings        Training[]
  TrainingPartners TrainingPartner[]
  ExerciceLikes    ExerciceLike[]
  liked            UserLike[]        @relation("liked")
  like_by          UserLike[]        @relation("liker")
  UserChatGroups   UserChatGroup[]
}

model Exercice {
  id                Int                @id @default(autoincrement()) @db.Integer
  name              String             @db.VarChar(100)
  difficulty        String             @db.VarChar(30)
  is_liked          Boolean            @default(false) @db.Boolean
  ExerciceTrainings ExerciceTraining[]
  ExerciceLikes     ExerciceLike[]
}

model ChatMessage {
  id            Int       @id @default(autoincrement()) @db.Integer
  chat_group    ChatGroup @relation(fields: [chat_group_id], references: [id])
  chat_group_id Int       @db.Integer
  sender        User      @relation(fields: [sender_id], references: [id])
  sender_id     String    @db.Uuid
  content       String    @db.VarChar(2000)
  sent_at       DateTime  @db.Timestamptz()
}

model Training {
  id                Int                @id @default(autoincrement()) @db.Integer
  user              User               @relation(fields: [user_id], references: [id])
  user_id           String             @db.Uuid
  start_at          DateTime           @db.Date
  finish_at         DateTime           @db.Date
  location          String             @db.VarChar(250)
  status            String             @db.VarChar(250)
  dynamic_latitude  Float              @db.DoublePrecision
  dynamic_longitude Float              @db.DoublePrecision
  ExerciceTrainings ExerciceTraining[]
  TrainingPartners  TrainingPartner[]
  ChatGroups        ChatGroup[]
}

model ExerciceTraining {
  id          Int      @id @default(autoincrement()) @db.Integer
  training    Training @relation(fields: [training_id], references: [id])
  exercice    Exercice @relation(fields: [exercice_id], references: [id])
  training_id Int      @db.Integer
  exercice_id Int      @db.Integer
  sets        Int      @db.Integer
  repetitions Int      @db.Integer
  weight      Float    @db.DoublePrecision
}

model TrainingPartner {
  id          Int      @id @default(autoincrement()) @db.Integer
  training    Training @relation(fields: [training_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
  training_id Int      @db.Integer
  user_id     String   @db.Uuid
  status      String   @db.VarChar(200)
}

model ExerciceLike {
  id          Int      @id @default(autoincrement()) @db.Integer
  user        User     @relation(fields: [user_id], references: [id])
  exercice    Exercice @relation(fields: [exercice_id], references: [id])
  user_id     String   @db.Uuid
  exercice_id Int      @db.Integer

  @@unique([user_id, exercice_id])
}

model UserLike {
  id       Int    @id @default(autoincrement()) @db.Integer
  liker    User   @relation("liker", fields: [liker_id], references: [id])
  liked    User   @relation("liked", fields: [liked_id], references: [id])
  liker_id String @db.Uuid
  liked_id String @db.Uuid

  @@unique([liker_id, liked_id])
}

model ChatGroup {
  id             Int             @id @default(autoincrement()) @db.Integer
  training       Training?        @relation(fields: [training_id], references: [id])
  training_id    Int?             @db.Integer
  name           String?         @db.VarChar(200)
  type           String          @db.VarChar(20)
  UserChatGroups UserChatGroup[]
  ChatMessages   ChatMessage[]
}

model UserChatGroup {
  id            Int       @id @default(autoincrement()) @db.Integer
  user          User      @relation(fields: [user_id], references: [id])
  chat_group    ChatGroup @relation(fields: [chat_group_id], references: [id])
  user_id       String    @db.Uuid
  chat_group_id Int       @db.Integer
}

model Location {
  id        Int    @id @default(autoincrement()) @db.Integer
  name      String @db.VarChar(400)
  address   String @db.VarChar(400)
  type      String @db.VarChar(100)
  latitude  Float  @db.DoublePrecision
  longitude Float  @db.DoublePrecision
}
