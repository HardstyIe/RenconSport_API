generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  firstName        String
  lastName         String
  password         String
  birthday         DateTime
  location         String
  phone            String
  ChatMessages     ChatMessage[]
  Trainings        Training[]
  TrainingPartners TrainingPartner[]
  ExerciceLikes    ExerciceLike[]
  Liked            UserLike[]        @relation("liked")
  LikedBy          UserLike[]        @relation("liker")
  UserChatGroups   UserChatGroup[]
}

model Exercice {
  id                Int                @id @default(autoincrement())
  name              String
  difficulty        String
  isLiked           Boolean            @default(false)
  ExerciceTrainings ExerciceTraining[]
  ExerciceLikes     ExerciceLike[]
}

model ChatMessage {
  id            Int      @id @default(autoincrement())
  chat_group_id Int
  sender        User     @relation(fields: [sender_id], references: [id])
  sender_id     String
  content       String
  sent_at       DateTime
}

model Training {
  id                Int                @id @default(autoincrement())
  user              User               @relation(fields: [user_id], references: [id])
  user_id           String
  start_at          DateTime
  finish_at         DateTime
  location          String
  status            String
  dynamic_latitude  Float
  dynamic_longitude Float
  ExerciceTrainings ExerciceTraining[]
  TrainingPartners  TrainingPartner[]
  ChatGroups        ChatGroup[]
}

model ExerciceTraining {
  id          Int      @id @default(autoincrement())
  training    Training @relation(fields: [training_id], references: [id])
  exercice    Exercice @relation(fields: [exercice_id], references: [id])
  training_id Int
  exercice_id Int
  sets        Int
  repetitions Int
  weight      Float
}

model TrainingPartner {
  id          Int      @id @default(autoincrement())
  training    Training @relation(fields: [training_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
  training_id Int
  user_id     String
  status      String
}

model ExerciceLike {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id])
  exercice    Exercice @relation(fields: [exercice_id], references: [id])
  user_id     String
  exercice_id Int

  @@unique([user_id, exercice_id])
}

model UserLike {
  id       Int    @id @default(autoincrement())
  liker    User   @relation("liker", fields: [liker_id], references: [id])
  liked    User   @relation("liked", fields: [liked_id], references: [id])
  liker_id String
  liked_id String

  @@unique([liker_id, liked_id])
}

model ChatGroup {
  id             Int             @id @default(autoincrement())
  training       Training        @relation(fields: [training_id], references: [id])
  training_id    Int
  name           String
  UserChatGroups UserChatGroup[]
}

model UserChatGroup {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [user_id], references: [id])
  chat_group    ChatGroup @relation(fields: [chat_group_id], references: [id])
  user_id       String
  chat_group_id Int
}

model Location {
  id        Int    @id @default(autoincrement())
  name      String
  address   String
  type      String
  latitude  Float
  longitude Float
}
